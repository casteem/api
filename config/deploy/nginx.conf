# Add on nginx.conf `server_tokens off;` to hide nginx version

# cat > /etc/nginx/sites-available/common.conf

ssl_certificate /etc/letsencrypt/live/steemhunt.com/fullchain.pem;  # after SSL setting
ssl_certificate_key /etc/letsencrypt/live/steemhunt.com/privkey.pem;  # after SSL setting
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_dhparam /etc/ssl/certs/dhparam.pem;
ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
ssl_session_timeout 1d;
ssl_session_cache shared:SSL:50m;
ssl_stapling on;
ssl_stapling_verify on;
add_header Strict-Transport-Security max-age=15768000;
client_max_body_size 10m;
proxy_buffers 32 1M;
proxy_buffer_size 256k;
client_body_buffer_size 256k; # be careful DDOS

gzip on;
gzip_static on;
gzip_types text/plain application/json application/javascript application/x-javascript text/javascript text/xml application/xml text/css;

# Add on `http` block

log_format filter '$remote_addr - $remote_user [$time_local] '
                  '"$temp" $status $body_bytes_sent '
                  '"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';


# cat > /etc/nginx/sites-enabled/default

upstream steemhunt {
  server unix://srv/web/steemhunt/shared/sockets/puma.sock;
}

upstream token {
  server unix://srv/web/token/shared/sockets/puma.sock;
}

server {
  listen 80;
  server_name steemhunt.com www.steemhunt.com;

  root /srv/web/steemhunt/current/public;
  location ^~ /.well-known/acme-challenge/ {
    allow all;
  }

  rewrite ^/(.*)$ https://steemhunt.com/$1 permanent; # after SSL setting
}

server {
  listen 80;
  server_name api.steemhunt.com;

  root /srv/web/steemhunt/current/public;
  location ^~ /.well-known/acme-challenge/ {
    allow all;
  }

  rewrite ^/(.*)$ https://api.steemhunt.com/$1 permanent; # after SSL setting
}


server {
  listen 80;
  server_name token.steemhunt.com;

  root /srv/web/token/current/public;
  location ^~ /.well-known/acme-challenge/ {
    allow all;
  }

  rewrite ^/(.*)$ https://token.steemhunt.com/$1 permanent; # after SSL setting
}

server {
  listen 443 ssl;
  server_name steemhunt.com www.steemhunt.com;

  include "/etc/nginx/sites-available/common.conf";
  root /srv/web/steemhunt/current/public;
  index  index.html;

  # Strip access_token from access log
  set $temp $request;
  if ($temp ~ (.*)access_token=[^&]*(.*)) {
    set $temp $1access_token=****$2;
  }
  error_log /srv/web/steemhunt/shared/log/nginx_web.error.log warn;
  access_log /srv/web/steemhunt/shared/log/nginx_web.access.log filter;

  # 404 if a file is requested (so the main app isn't served)
  location ~* ^/static {
    access_log off;
    error_log off;
    expires 1y;
    add_header Cache-Control public;
    add_header Last-Modified "";
    add_header ETag "";

    try_files $uri =404;
  }

  location ~* ^.+\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|ttf|woff|svg|eot)$ {
    access_log off;
    error_log off;
    expires 1y;
    add_header Cache-Control public;
    add_header Last-Modified "";
    add_header ETag "";

    try_files $uri =404;
  }

  location = /service-worker.js {
    add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
    if_modified_since off;
    expires off;
    etag off;
  }

  location @prerender {
    set $prerender 0;
    if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator|developers\.google\.com|Google-Structured-Data-Testing-Tool|redditbot|Discordbot|TelegramBot") {
      set $temp 'PRERENDERED - $temp';
      set $prerender 1;
     }
    if ($args ~ "_escaped_fragment_") {
      set $temp 'PRERENDERED - $temp';
      set $prerender 1;
    }
    if ($http_user_agent ~ "Prerender") {
      set $prerender 0;
    }

    if ($prerender = 1) {
      rewrite .* /https://$host$request_uri? break;
      proxy_pass http://172.31.20.68:7777;
    }
    if ($prerender = 0) {
      rewrite .* /index.html break;
    }
  }

  location / {
    try_files $uri @prerender;
  }

  # add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
  # if_modified_since off;
  # expires off;
  # etag off;
  # try_files $uri @prerender /index.html;
}

# MARK: - CORS settings
# NOTE: You canno use `if` to setup CORS
# even though there're hundreds of examples using `if` on Google
# Reference: https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
# Thanks to: https://gist.github.com/sbuzonas/6e2dbc1218a0be0d7ae2
# WTF is this?: https://gist.github.com/algal/5480916

map $http_origin $allow_origin {
  default "";
  "~^https?://(?:[^/]*\.)?(steemhunt\.com)(?::[0-9]+)?$" "$http_origin";
}

map $request_method $cors_method {
  default "allowed";
  "OPTIONS" "preflight";
}

map $cors_method $cors_max_age {
  default "";
  "preflight" 1728000;
}

map $cors_method $cors_allow_methods {
  default "";
  "preflight" "GET, POST, PUT, PATCH, DELETE, OPTIONS";
}

map $cors_method $cors_allow_headers {
  default "";
  "preflight" "Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since";
}

map $cors_method $cors_content_length {
  default $initial_content_length;
  "preflight" 0;
}

map $cors_method $cors_content_type {
  default $initial_content_type;
  "preflight" "text/plain; charset=UTF-8";
}

server {
  listen 443 ssl;
  server_name api.steemhunt.com;

  include "/etc/nginx/sites-available/common.conf";
  root /srv/web/steemhunt/current/public;

  error_log /srv/web/steemhunt/shared/log/nginx_api.error.log warn;
  access_log /srv/web/steemhunt/shared/log/nginx_api.access.log;

  add_header Access-Control-Allow-Origin $allow_origin;
  add_header Access-Control-Allow-Credentials 'true';
  add_header Access-Control-Max-Age $cors_max_age;
  add_header Access-Control-Allow-Methods $cors_allow_methods;
  add_header Access-Control-Allow-Headers $cors_allow_headers;

  set $initial_content_length $sent_http_content_length;
  add_header 'Content-Length' "";
  add_header 'Content-Length' $cors_content_length;

  set $initial_content_type $sent_http_content_type;
  add_header Content-Type "";
  add_header Content-Type $cors_content_type;

  if ($request_method = 'OPTIONS') {
    return 204;
  }

  location ^~ /.well-known/acme-challenge/ {
    allow all;
  }

  location / {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://steemhunt;
  }
}

server {
  listen 443 ssl;
  server_name token.steemhunt.com;

  include "/etc/nginx/sites-available/common.conf";
  root /srv/web/token/current/public;

  error_log /srv/web/token/shared/log/nginx_api.error.log warn;
  access_log /srv/web/token/shared/log/nginx_api.access.log;

  location ^~ /.well-known/acme-challenge/ {
    allow all;
  }

  location ~* ^/(assets|system)/|robots.txt|\.(js|css|png|jpg|jpeg|gif|ico|txt)$ {
    access_log off;
    error_log off;
    gzip_static on; # to serve pre-gzipped version
    expires 1y;
    add_header Cache-Control public;
    add_header Last-Modified "";
    add_header ETag "";
  }

  try_files $uri @token;

  location @token {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://token;
  }
}
